// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagementSystem.Data;

#nullable disable

namespace TaskManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241119102451_SeededDataAppUsers")]
    partial class SeededDataAppUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e15ce2eb-3781-4351-a205-dc133f889d57",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "335f4107-9914-4d65-9542-92db92194c0b",
                            Name = "TaskManager",
                            NormalizedName = "TASKMANAGER"
                        },
                        new
                        {
                            Id = "29d8720e-11e4-466c-9b6f-ced906a1cf47",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "384df32d-2a7c-4147-baf1-152db746565b",
                            RoleId = "e15ce2eb-3781-4351-a205-dc133f889d57"
                        },
                        new
                        {
                            UserId = "16914ec6-4686-4c2c-ba58-5a9c3c15f404",
                            RoleId = "335f4107-9914-4d65-9542-92db92194c0b"
                        },
                        new
                        {
                            UserId = "4c5d1a8e-4f28-4ed5-8427-b72f0df86619",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "68ed7806-e19b-4610-8146-e999b0732379",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "4d7b0c08-5565-420b-854e-10e8b3ea69d6",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "06827f01-662b-4641-abce-b1c496f28660",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "fd65ce29-7600-446a-a89f-f3422bead07e",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "37bded91-485a-44b5-bbc7-53e5be7c3d0b",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "873d2b23-002a-477f-856e-5ed602b5405c",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "336722d0-5991-49a5-ab55-d7414b598c63",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "d15c6625-2ded-49e4-b8b9-1f1738a696e3",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "102075be-a710-4035-87e0-25f7295074e6",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaskManagementSystem.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "384df32d-2a7c-4147-baf1-152db746565b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e45dbe73-b370-4213-b827-ce6b161bd683",
                            DateOfBirth = new DateOnly(2024, 11, 15),
                            DepartmentName = "IT Support",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPeLmP2sh/jv0+7EuMIrg2SGJWTr548xtORb+s/paw1iT4uQoUVhKeAJJLjzIxFoMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f262fbb8-a4d6-4abc-b6cd-0d9348bb273e",
                            SkillLevel = 10,
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "16914ec6-4686-4c2c-ba58-5a9c3c15f404",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6603aacf-d9c6-4230-b4da-8dae21d47ef0",
                            DateOfBirth = new DateOnly(2024, 11, 15),
                            DepartmentName = "IT Support",
                            Email = "taskManager@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "taskManager",
                            LastName = "taskManager",
                            LockoutEnabled = false,
                            NormalizedEmail = "TASKMANAGER@LOCALHOST.COM",
                            NormalizedUserName = "TASKMANAGER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFXXAtikvPc/26pTn8DfB7tfVtXpFOCm4P0yqoXAduy9Q2RVzchdRL4gpp3NydqlVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "65ec27bb-c5a1-469f-9444-cf3e2a82e77c",
                            SkillLevel = 10,
                            TwoFactorEnabled = false,
                            UserName = "taskManager@localhost.com"
                        },
                        new
                        {
                            Id = "4c5d1a8e-4f28-4ed5-8427-b72f0df86619",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "995ba181-e4d3-4558-8fb2-5d612f3f076c",
                            DateOfBirth = new DateOnly(1998, 11, 20),
                            DepartmentName = "IT Support",
                            Email = "empl1@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl1",
                            LastName = "empl1",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL1@LOCALHOST.COM",
                            NormalizedUserName = "EMPL1@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHAe6qnGOPRodQHKDjE6F1fZoR8g0RTuYrM8t/jJFPd0Qw6bp3YcQkl2LkdgQvVOvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d3476bb-99f9-4d0c-a44c-e740f4c1bd1e",
                            SkillLevel = 7,
                            TwoFactorEnabled = false,
                            UserName = "empl1@localhost.com"
                        },
                        new
                        {
                            Id = "68ed7806-e19b-4610-8146-e999b0732379",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cde24738-a408-4eb5-b11c-7bdcc9f68bbe",
                            DateOfBirth = new DateOnly(1990, 11, 15),
                            DepartmentName = "IT Support",
                            Email = "empl2@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl2",
                            LastName = "empl2",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL2@LOCALHOST.COM",
                            NormalizedUserName = "EMPL2@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDLRiswTTxUknwDTYqisXFU2ak29Va2aYM/nFcYchb4M4XA2E3Cpw9f0y8O/2m7hjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85dabcf8-eaa7-4ec4-ac5b-4ef62300a206",
                            SkillLevel = 9,
                            TwoFactorEnabled = false,
                            UserName = "empl2@localhost.com"
                        },
                        new
                        {
                            Id = "4d7b0c08-5565-420b-854e-10e8b3ea69d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c18fcda-bc17-44a2-a6a8-1d4a43fb366a",
                            DateOfBirth = new DateOnly(1995, 1, 15),
                            DepartmentName = "IT Support",
                            Email = "empl3@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl3",
                            LastName = "empl3",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL3@LOCALHOST.COM",
                            NormalizedUserName = "EMPL3@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIPYlCu2H7oEbkTZM9cdONUSifrJYnI9hhihIPk5T5VuU50lWowaplQkdVBgyuMQZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f7d7597-046e-470e-8985-ee9994a3d6ec",
                            SkillLevel = 6,
                            TwoFactorEnabled = false,
                            UserName = "empl3@localhost.com"
                        },
                        new
                        {
                            Id = "06827f01-662b-4641-abce-b1c496f28660",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bb60589-9b17-411d-af2c-0853a97951cf",
                            DateOfBirth = new DateOnly(1999, 11, 15),
                            DepartmentName = "Development",
                            Email = "empl4@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl4",
                            LastName = "empl4",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL4@LOCALHOST.COM",
                            NormalizedUserName = "EMPL4@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDO4qvA5slwFB5oNldtLO6wUnMrmtcb1t5mWRDkHrrzjIgxIKErnVJbayriRwQoUgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f97306f2-5919-4362-88a5-6bae0e13bfa3",
                            SkillLevel = 10,
                            TwoFactorEnabled = false,
                            UserName = "empl4@localhost.com"
                        },
                        new
                        {
                            Id = "fd65ce29-7600-446a-a89f-f3422bead07e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d0946f6-762a-44cf-bceb-57a7b431fe86",
                            DateOfBirth = new DateOnly(2000, 11, 15),
                            DepartmentName = "Development",
                            Email = "empl5@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl5",
                            LastName = "empl5",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL5@LOCALHOST.COM",
                            NormalizedUserName = "EMPL5@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBtIIFu+l5fVtD6SNZBgjuqumoW5X/AOghSTESuLnfdjHauxOi1sNIvml/ZxHd3O4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1fb6e0c-eea5-4a85-bc5c-b873f378e688",
                            SkillLevel = 6,
                            TwoFactorEnabled = false,
                            UserName = "empl5@localhost.com"
                        },
                        new
                        {
                            Id = "37bded91-485a-44b5-bbc7-53e5be7c3d0b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc646d3a-89d5-45eb-9ab2-c8ee6924813a",
                            DateOfBirth = new DateOnly(1999, 3, 22),
                            DepartmentName = "Development",
                            Email = "empl6@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl6",
                            LastName = "empl6",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL6@LOCALHOST.COM",
                            NormalizedUserName = "EMPL6@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBgA7iCEOwdfQPsa+v8lWcikrJbbqDqFuEG5Bwhvd2I2ndgiUMz8oJZ1H3augDrgZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8db0ed89-1d40-4ddd-aa99-4b884d5412ec",
                            SkillLevel = 7,
                            TwoFactorEnabled = false,
                            UserName = "empl6@localhost.com"
                        },
                        new
                        {
                            Id = "873d2b23-002a-477f-856e-5ed602b5405c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea69883e-fe39-42cb-9d7c-0f9da6e3513b",
                            DateOfBirth = new DateOnly(1980, 10, 20),
                            DepartmentName = "Development",
                            Email = "empl7@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl7",
                            LastName = "empl7",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL7@LOCALHOST.COM",
                            NormalizedUserName = "EMPL7@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGz/38DZ8KqapMlxRhjU8iENPg6itI9um/8OocN4Uz8amNVhdqU7RKlVTWih7FCh1g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "683ef482-bca9-4783-a397-24434ff0d5b1",
                            SkillLevel = 7,
                            TwoFactorEnabled = false,
                            UserName = "empl7@localhost.com"
                        },
                        new
                        {
                            Id = "336722d0-5991-49a5-ab55-d7414b598c63",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8901ffbd-42af-4c31-a444-9df582ed0837",
                            DateOfBirth = new DateOnly(1997, 8, 8),
                            DepartmentName = "Marketing",
                            Email = "empl8@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl8",
                            LastName = "empl8",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL8@LOCALHOST.COM",
                            NormalizedUserName = "EMPL8@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFPFHJ4ZLpCaAnBbqw85UNjoo3ALYmtGQ+nHhuELzs16vMA6twjWKSaE9jaGJy4j1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c63357f-3af8-4ac7-8d39-9300ec5aaf61",
                            SkillLevel = 10,
                            TwoFactorEnabled = false,
                            UserName = "empl8@localhost.com"
                        },
                        new
                        {
                            Id = "d15c6625-2ded-49e4-b8b9-1f1738a696e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2736273a-27a9-46cc-b03e-9d2e521c76f8",
                            DateOfBirth = new DateOnly(1989, 11, 15),
                            DepartmentName = "Marketing",
                            Email = "empl9@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl9",
                            LastName = "empl9",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL9@LOCALHOST.COM",
                            NormalizedUserName = "EMPL9@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHPDYk26lraQFj4Ak5J60tTlVikSXsmIzofIZNSV+tTKVNNhSFuBNsX9qCniIj0oKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc81fe15-72c8-4700-905a-34fd21d0f5ef",
                            SkillLevel = 7,
                            TwoFactorEnabled = false,
                            UserName = "empl9@localhost.com"
                        },
                        new
                        {
                            Id = "102075be-a710-4035-87e0-25f7295074e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60ec1abf-9b6a-42f3-b120-29e63933866d",
                            DateOfBirth = new DateOnly(1999, 7, 22),
                            DepartmentName = "Marketing",
                            Email = "empl10@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl10",
                            LastName = "empl10",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL10@LOCALHOST.COM",
                            NormalizedUserName = "EMPL10@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA25l1LKneC1Oi9L/KgO2Jy5eAJN3B6m9Zm6fqHXB2sN7pElSjHgU1E2bndBpkB4gw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cff6d478-37a8-4cd3-96ec-6adbcf198413",
                            SkillLevel = 6,
                            TwoFactorEnabled = false,
                            UserName = "empl10@localhost.com"
                        });
                });

            modelBuilder.Entity("TaskManagementSystem.Data.TaskAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WorkingDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskTypeId")
                        .IsUnique();

                    b.HasIndex("WorkingDayId");

                    b.ToTable("TaskAllocations");
                });

            modelBuilder.Entity("TaskManagementSystem.Data.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Allocated")
                        .HasColumnType("bit");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("TaskManagementSystem.Data.WorkingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("WorkingDays");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManagementSystem.Data.TaskAllocation", b =>
                {
                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Data.TaskType", "TaskType")
                        .WithOne("TaskAllocation")
                        .HasForeignKey("TaskManagementSystem.Data.TaskAllocation", "TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Data.WorkingDay", "WorkingDay")
                        .WithMany()
                        .HasForeignKey("WorkingDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TaskType");

                    b.Navigation("WorkingDay");
                });

            modelBuilder.Entity("TaskManagementSystem.Data.TaskType", b =>
                {
                    b.Navigation("TaskAllocation");
                });
#pragma warning restore 612, 618
        }
    }
}
