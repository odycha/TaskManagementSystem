// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagementSystem.Data;

#nullable disable

namespace TaskManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241125085808_addedTimeToWorkingDays")]
    partial class addedTimeToWorkingDays
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e15ce2eb-3781-4351-a205-dc133f889d57",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "335f4107-9914-4d65-9542-92db92194c0b",
                            Name = "TaskManager",
                            NormalizedName = "TASKMANAGER"
                        },
                        new
                        {
                            Id = "29d8720e-11e4-466c-9b6f-ced906a1cf47",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "384df32d-2a7c-4147-baf1-152db746565b",
                            RoleId = "e15ce2eb-3781-4351-a205-dc133f889d57"
                        },
                        new
                        {
                            UserId = "16914ec6-4686-4c2c-ba58-5a9c3c15f404",
                            RoleId = "335f4107-9914-4d65-9542-92db92194c0b"
                        },
                        new
                        {
                            UserId = "4c5d1a8e-4f28-4ed5-8427-b72f0df86619",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "68ed7806-e19b-4610-8146-e999b0732379",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "4d7b0c08-5565-420b-854e-10e8b3ea69d6",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "06827f01-662b-4641-abce-b1c496f28660",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "fd65ce29-7600-446a-a89f-f3422bead07e",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "37bded91-485a-44b5-bbc7-53e5be7c3d0b",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "873d2b23-002a-477f-856e-5ed602b5405c",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "336722d0-5991-49a5-ab55-d7414b598c63",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "d15c6625-2ded-49e4-b8b9-1f1738a696e3",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "102075be-a710-4035-87e0-25f7295074e6",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaskManagementSystem.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "384df32d-2a7c-4147-baf1-152db746565b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0014825b-f37b-4520-81f8-7e399a234202",
                            DateOfBirth = new DateOnly(2024, 11, 15),
                            DepartmentName = "IT Support",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDS+4ZfJAoFwQNeppI5ER1uBoMjDYZOgTf+uXo3RCNmQTXU7IBOwm7vMAkHQb3JNmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d20d8f82-9798-471c-910f-848a6480ac67",
                            SkillLevel = 10,
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "16914ec6-4686-4c2c-ba58-5a9c3c15f404",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d630c06-b2bb-4918-9ce1-1acd5eef62fc",
                            DateOfBirth = new DateOnly(2024, 11, 15),
                            DepartmentName = "IT Support",
                            Email = "taskManager@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "taskManager",
                            LastName = "taskManager",
                            LockoutEnabled = false,
                            NormalizedEmail = "TASKMANAGER@LOCALHOST.COM",
                            NormalizedUserName = "TASKMANAGER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMCAu0Pnnl7Hgb7L8KfU1UJrwDRLb/Xuxlqgk5I+Zs1zJCsHQ9ye+Riy85tc4kOg8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00a724c2-62f7-491e-869a-1f6eb39bdab4",
                            SkillLevel = 10,
                            TwoFactorEnabled = false,
                            UserName = "taskManager@localhost.com"
                        },
                        new
                        {
                            Id = "4c5d1a8e-4f28-4ed5-8427-b72f0df86619",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41469ae1-ff96-4b1b-909a-0fc7aceff783",
                            DateOfBirth = new DateOnly(1998, 11, 20),
                            DepartmentName = "IT Support",
                            Email = "empl1@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl1",
                            LastName = "empl1",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL1@LOCALHOST.COM",
                            NormalizedUserName = "EMPL1@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAxLo0KkNVJflcN8rDhRN4KRxDUQe8zltpTywGBI+qv94I9dJlbtkcCoFjA9J/VEUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7b0e93c-2f94-47ea-86f3-c083cc411741",
                            SkillLevel = 7,
                            TwoFactorEnabled = false,
                            UserName = "empl1@localhost.com"
                        },
                        new
                        {
                            Id = "68ed7806-e19b-4610-8146-e999b0732379",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3069a2b1-0942-462c-9e8b-1797bc74d693",
                            DateOfBirth = new DateOnly(1990, 11, 15),
                            DepartmentName = "IT Support",
                            Email = "empl2@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl2",
                            LastName = "empl2",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL2@LOCALHOST.COM",
                            NormalizedUserName = "EMPL2@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKNh8SM0kigWOcJGaJyHF0Zk6IOBXQ4je2K+Ec6FyM3ItC2XIl2SPZFBnlo20IzFew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2dbea8b4-67f3-4a16-b0f0-84e34ea55078",
                            SkillLevel = 9,
                            TwoFactorEnabled = false,
                            UserName = "empl2@localhost.com"
                        },
                        new
                        {
                            Id = "4d7b0c08-5565-420b-854e-10e8b3ea69d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "636be5a8-158d-4aa1-baf3-19e93ab5d3f9",
                            DateOfBirth = new DateOnly(1995, 1, 15),
                            DepartmentName = "IT Support",
                            Email = "empl3@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl3",
                            LastName = "empl3",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL3@LOCALHOST.COM",
                            NormalizedUserName = "EMPL3@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI+bbyYFvsyTpGaiuvKFsrLewGnP+ktZpKWk4ERat9+8VVuvG/c4cojphXMss6CtnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94aabb5b-ebaf-45c8-8841-bf9790e3ddeb",
                            SkillLevel = 6,
                            TwoFactorEnabled = false,
                            UserName = "empl3@localhost.com"
                        },
                        new
                        {
                            Id = "06827f01-662b-4641-abce-b1c496f28660",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc7272f0-889a-4b65-85df-9c6a4d082cb3",
                            DateOfBirth = new DateOnly(1999, 11, 15),
                            DepartmentName = "Development",
                            Email = "empl4@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl4",
                            LastName = "empl4",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL4@LOCALHOST.COM",
                            NormalizedUserName = "EMPL4@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP4H6NS3FzuvEkyYFur37E1ipQlJ1JP5Itkm5egTOcB+sPRA1ZPsB48xTKhBGc4vtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a801f02-db98-49af-bc14-939951992920",
                            SkillLevel = 10,
                            TwoFactorEnabled = false,
                            UserName = "empl4@localhost.com"
                        },
                        new
                        {
                            Id = "fd65ce29-7600-446a-a89f-f3422bead07e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc9e3c4c-595e-4abe-85ad-182c22f6aa90",
                            DateOfBirth = new DateOnly(2000, 11, 15),
                            DepartmentName = "Development",
                            Email = "empl5@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl5",
                            LastName = "empl5",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL5@LOCALHOST.COM",
                            NormalizedUserName = "EMPL5@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMbzVkKp2BC7HnN9Fq2ZUUSjKCXf8zxgUPpg4ESeuLzQwNnpwrFKefNzepJqEaY19Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6226a368-e0c1-4005-9193-0296ff4ba280",
                            SkillLevel = 6,
                            TwoFactorEnabled = false,
                            UserName = "empl5@localhost.com"
                        },
                        new
                        {
                            Id = "37bded91-485a-44b5-bbc7-53e5be7c3d0b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e4dbb57-03af-4f90-ad57-98188cc9ebed",
                            DateOfBirth = new DateOnly(1999, 3, 22),
                            DepartmentName = "Development",
                            Email = "empl6@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl6",
                            LastName = "empl6",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL6@LOCALHOST.COM",
                            NormalizedUserName = "EMPL6@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDCSDOZTGFxMPemuQcVr2BDNQZLRE9pahQn7y604UMUgBphVlohZVJSkBl+bEfoxyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9df909d3-9e05-4cd0-894f-738924e89e06",
                            SkillLevel = 7,
                            TwoFactorEnabled = false,
                            UserName = "empl6@localhost.com"
                        },
                        new
                        {
                            Id = "873d2b23-002a-477f-856e-5ed602b5405c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fae20492-9b9f-4b03-a0c1-e6631cbfe8da",
                            DateOfBirth = new DateOnly(1980, 10, 20),
                            DepartmentName = "Development",
                            Email = "empl7@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl7",
                            LastName = "empl7",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL7@LOCALHOST.COM",
                            NormalizedUserName = "EMPL7@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHYf/wFWq/AWR/aV98AyN1jS6TLJAxmFicd2LRhMP8tB8Hw9zUzUr6VaRnFZ/tONdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b465aa7a-0d11-48ca-8184-085798e049e5",
                            SkillLevel = 7,
                            TwoFactorEnabled = false,
                            UserName = "empl7@localhost.com"
                        },
                        new
                        {
                            Id = "336722d0-5991-49a5-ab55-d7414b598c63",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c11e07a3-4c3d-4dbf-a913-3b651632a55e",
                            DateOfBirth = new DateOnly(1997, 8, 8),
                            DepartmentName = "Marketing",
                            Email = "empl8@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl8",
                            LastName = "empl8",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL8@LOCALHOST.COM",
                            NormalizedUserName = "EMPL8@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELNjpkG0WV00ePQ7rg5zEOBR2GhGFQ1z+M1c05QJosb2gfDwpLuY176ioQbhs4yrIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6df7782b-55e3-4375-9086-b9a0a1db4f19",
                            SkillLevel = 10,
                            TwoFactorEnabled = false,
                            UserName = "empl8@localhost.com"
                        },
                        new
                        {
                            Id = "d15c6625-2ded-49e4-b8b9-1f1738a696e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0bae1bef-f5ee-402d-ae5f-882b551897dc",
                            DateOfBirth = new DateOnly(1989, 11, 15),
                            DepartmentName = "Marketing",
                            Email = "empl9@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl9",
                            LastName = "empl9",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL9@LOCALHOST.COM",
                            NormalizedUserName = "EMPL9@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJRDgNxuAnNYkZdJZalx2+6wBej1FTYm7f+SuApZ/Woae/l4HFcFBVefZvl3OQ9jWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e719dc3f-ac0b-4489-94b5-2653540285a7",
                            SkillLevel = 7,
                            TwoFactorEnabled = false,
                            UserName = "empl9@localhost.com"
                        },
                        new
                        {
                            Id = "102075be-a710-4035-87e0-25f7295074e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06b2ac01-5ebd-4d4b-8f4c-3bdcbe497c57",
                            DateOfBirth = new DateOnly(1999, 7, 22),
                            DepartmentName = "Marketing",
                            Email = "empl10@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl10",
                            LastName = "empl10",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL10@LOCALHOST.COM",
                            NormalizedUserName = "EMPL10@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELCf5oxNTtb3tYZQ1l+8QHxyZFp7QZz2o6Df0BBR64edg2ALujcAgZP6CDs5Dnanhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd30ae0e-b4e4-42b8-8109-a23e58f98214",
                            SkillLevel = 6,
                            TwoFactorEnabled = false,
                            UserName = "empl10@localhost.com"
                        });
                });

            modelBuilder.Entity("TaskManagementSystem.Data.TaskAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WorkingDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskTypeId")
                        .IsUnique();

                    b.HasIndex("WorkingDayId");

                    b.ToTable("TaskAllocations");
                });

            modelBuilder.Entity("TaskManagementSystem.Data.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Allocated")
                        .HasColumnType("bit");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("TaskManagementSystem.Data.WorkingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("WorkingDays");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManagementSystem.Data.TaskAllocation", b =>
                {
                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", "Employee")
                        .WithMany("TaskAllocations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Data.TaskType", "TaskType")
                        .WithOne("TaskAllocation")
                        .HasForeignKey("TaskManagementSystem.Data.TaskAllocation", "TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Data.WorkingDay", "WorkingDay")
                        .WithMany()
                        .HasForeignKey("WorkingDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TaskType");

                    b.Navigation("WorkingDay");
                });

            modelBuilder.Entity("TaskManagementSystem.Data.ApplicationUser", b =>
                {
                    b.Navigation("TaskAllocations");
                });

            modelBuilder.Entity("TaskManagementSystem.Data.TaskType", b =>
                {
                    b.Navigation("TaskAllocation");
                });
#pragma warning restore 612, 618
        }
    }
}
