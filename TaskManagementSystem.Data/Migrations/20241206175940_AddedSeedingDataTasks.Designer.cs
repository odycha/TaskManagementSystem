// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagementSystem.Data;

#nullable disable

namespace TaskManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241206175940_AddedSeedingDataTasks")]
    partial class AddedSeedingDataTasks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e15ce2eb-3781-4351-a205-dc133f889d57",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "335f4107-9914-4d65-9542-92db92194c0b",
                            Name = "TaskManager",
                            NormalizedName = "TASKMANAGER"
                        },
                        new
                        {
                            Id = "29d8720e-11e4-466c-9b6f-ced906a1cf47",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "384df32d-2a7c-4147-baf1-152db746565b",
                            RoleId = "e15ce2eb-3781-4351-a205-dc133f889d57"
                        },
                        new
                        {
                            UserId = "16914ec6-4686-4c2c-ba58-5a9c3c15f404",
                            RoleId = "335f4107-9914-4d65-9542-92db92194c0b"
                        },
                        new
                        {
                            UserId = "4c5d1a8e-4f28-4ed5-8427-b72f0df86619",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "68ed7806-e19b-4610-8146-e999b0732379",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "4d7b0c08-5565-420b-854e-10e8b3ea69d6",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "06827f01-662b-4641-abce-b1c496f28660",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "fd65ce29-7600-446a-a89f-f3422bead07e",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "37bded91-485a-44b5-bbc7-53e5be7c3d0b",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "873d2b23-002a-477f-856e-5ed602b5405c",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "336722d0-5991-49a5-ab55-d7414b598c63",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "d15c6625-2ded-49e4-b8b9-1f1738a696e3",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        },
                        new
                        {
                            UserId = "102075be-a710-4035-87e0-25f7295074e6",
                            RoleId = "29d8720e-11e4-466c-9b6f-ced906a1cf47"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaskManagementSystem.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "384df32d-2a7c-4147-baf1-152db746565b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee0b4f77-5417-425a-a2ae-0e05ba6412c8",
                            DateOfBirth = new DateOnly(2024, 11, 15),
                            DepartmentName = "IT Support",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECVe8YQTPgMFadNO01w/hxeHWKDZT9YR/MOwmOMW9iWUCKDYVFh4yKMVkHIjoi9G4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3bcddc1e-952c-4803-84a2-ef6341573954",
                            SkillLevel = 10,
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "16914ec6-4686-4c2c-ba58-5a9c3c15f404",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c85994af-c577-4685-9352-944d4f3e5305",
                            DateOfBirth = new DateOnly(2024, 11, 15),
                            DepartmentName = "IT Support",
                            Email = "taskManager@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "taskManager",
                            LastName = "taskManager",
                            LockoutEnabled = false,
                            NormalizedEmail = "TASKMANAGER@LOCALHOST.COM",
                            NormalizedUserName = "TASKMANAGER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKxlYXRxz6si5wGfbuvEmMm0737CmtUumBshxhRSJTFiLqKyB5xDw4PLIUvMQD7jUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "022b0222-62e3-45fe-a7ff-4b32b3c3822b",
                            SkillLevel = 10,
                            TwoFactorEnabled = false,
                            UserName = "taskManager@localhost.com"
                        },
                        new
                        {
                            Id = "4c5d1a8e-4f28-4ed5-8427-b72f0df86619",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb190986-09ae-447e-9d00-1741566a61a0",
                            DateOfBirth = new DateOnly(1998, 11, 20),
                            DepartmentName = "IT Support",
                            Email = "empl1@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl1",
                            LastName = "empl1",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL1@LOCALHOST.COM",
                            NormalizedUserName = "EMPL1@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIWQ6/lxXlalWhE0x6mRKRmnEF8nn5TNEIZkrhUpYlkhG9IDrWMNYGH4C6VwIlcqGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "348eb9a1-32a5-470c-a18e-e9c848a3b42b",
                            SkillLevel = 7,
                            TwoFactorEnabled = false,
                            UserName = "empl1@localhost.com"
                        },
                        new
                        {
                            Id = "68ed7806-e19b-4610-8146-e999b0732379",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42d851c8-b196-46cf-b2cb-557d1c03b868",
                            DateOfBirth = new DateOnly(1990, 11, 15),
                            DepartmentName = "IT Support",
                            Email = "empl2@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl2",
                            LastName = "empl2",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL2@LOCALHOST.COM",
                            NormalizedUserName = "EMPL2@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEmbyLO+9W0q31Wy26Nnx4cN/iOSebXoTUfMrthaNO1Ud5jTv2GJOtEuJ50J/LamGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef0bfd06-96a8-4338-9cca-91922ffb1dd3",
                            SkillLevel = 9,
                            TwoFactorEnabled = false,
                            UserName = "empl2@localhost.com"
                        },
                        new
                        {
                            Id = "4d7b0c08-5565-420b-854e-10e8b3ea69d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ccccdbf-2f33-4b0b-84f3-92e441299eab",
                            DateOfBirth = new DateOnly(1995, 1, 15),
                            DepartmentName = "IT Support",
                            Email = "empl3@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl3",
                            LastName = "empl3",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL3@LOCALHOST.COM",
                            NormalizedUserName = "EMPL3@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPPtNXddDJC4bzacCfo7U76NcMNde9vZVC1einbjb7U6EX/MR/AHi2fq6jywdfcVtA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfdd604f-4512-4c93-aa7b-9a6d02aec80a",
                            SkillLevel = 6,
                            TwoFactorEnabled = false,
                            UserName = "empl3@localhost.com"
                        },
                        new
                        {
                            Id = "06827f01-662b-4641-abce-b1c496f28660",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c56b14a1-1d5e-4c5f-bbc3-9f32b1efe44a",
                            DateOfBirth = new DateOnly(1999, 11, 15),
                            DepartmentName = "Development",
                            Email = "empl4@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl4",
                            LastName = "empl4",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL4@LOCALHOST.COM",
                            NormalizedUserName = "EMPL4@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF8tEDYb1MF2GblUpk9DpZcp5HpqgtcaLdvdIY4qqua6KPbnaGTs1dU7nDOvwHNZXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c039316-bb09-423d-b706-e216fa06e833",
                            SkillLevel = 10,
                            TwoFactorEnabled = false,
                            UserName = "empl4@localhost.com"
                        },
                        new
                        {
                            Id = "fd65ce29-7600-446a-a89f-f3422bead07e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce6f0198-183a-48df-b18a-252136e94ef2",
                            DateOfBirth = new DateOnly(2000, 11, 15),
                            DepartmentName = "Development",
                            Email = "empl5@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl5",
                            LastName = "empl5",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL5@LOCALHOST.COM",
                            NormalizedUserName = "EMPL5@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEIYiKE7avZO9GxoIrPESPSM83jwVZJeBurFfv8IKsCjdN5MsWc2W7JWy2GYlnE3Hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4283e5b5-dd48-4164-bb7d-867ab083a9d1",
                            SkillLevel = 6,
                            TwoFactorEnabled = false,
                            UserName = "empl5@localhost.com"
                        },
                        new
                        {
                            Id = "37bded91-485a-44b5-bbc7-53e5be7c3d0b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de039aa7-556e-4ce1-98cf-06885549beb3",
                            DateOfBirth = new DateOnly(1999, 3, 22),
                            DepartmentName = "Development",
                            Email = "empl6@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl6",
                            LastName = "empl6",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL6@LOCALHOST.COM",
                            NormalizedUserName = "EMPL6@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKhMv672atNyjcsIiMCRN7lN9G3E54bSKZXO6MOQ6OXpTqodqRwKuTeBLt2k9isO9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b500601-30d3-4496-acd0-570a16bd874b",
                            SkillLevel = 7,
                            TwoFactorEnabled = false,
                            UserName = "empl6@localhost.com"
                        },
                        new
                        {
                            Id = "873d2b23-002a-477f-856e-5ed602b5405c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5101851c-3b40-4b87-b802-481cd468c6db",
                            DateOfBirth = new DateOnly(1980, 10, 20),
                            DepartmentName = "Development",
                            Email = "empl7@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl7",
                            LastName = "empl7",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL7@LOCALHOST.COM",
                            NormalizedUserName = "EMPL7@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJznDY1jUQ55P1U8RBNeE/9IeRVUNnDeqE/UShDCoWa5+2QqSygId/p1e+ovGCE68A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b50d4b0-2ff5-46ca-89eb-03e4f366c5e9",
                            SkillLevel = 7,
                            TwoFactorEnabled = false,
                            UserName = "empl7@localhost.com"
                        },
                        new
                        {
                            Id = "336722d0-5991-49a5-ab55-d7414b598c63",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "faafe367-ace4-4d42-a229-dc6a5e3335c9",
                            DateOfBirth = new DateOnly(1997, 8, 8),
                            DepartmentName = "Marketing",
                            Email = "empl8@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl8",
                            LastName = "empl8",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL8@LOCALHOST.COM",
                            NormalizedUserName = "EMPL8@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHBaNP4b7GfeJjVpAFm9AzQypYmx3N2dVSRbw7AE0raTa92gcUjLPq2+afV3iCKkfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e8b76c8-658a-4cd0-9ae8-93ef488fba60",
                            SkillLevel = 10,
                            TwoFactorEnabled = false,
                            UserName = "empl8@localhost.com"
                        },
                        new
                        {
                            Id = "d15c6625-2ded-49e4-b8b9-1f1738a696e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "773f5073-42c1-45f2-bf2e-5ab48fe22c27",
                            DateOfBirth = new DateOnly(1989, 11, 15),
                            DepartmentName = "Marketing",
                            Email = "empl9@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl9",
                            LastName = "empl9",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL9@LOCALHOST.COM",
                            NormalizedUserName = "EMPL9@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHZI7GsdqShR3/mmOUsXefPVJGf9r4xrBOOcyrTaDmehCZvmi6cDzYrazS6a76R1ZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a7dd945-b1be-4871-a9aa-8cdab51000e9",
                            SkillLevel = 7,
                            TwoFactorEnabled = false,
                            UserName = "empl9@localhost.com"
                        },
                        new
                        {
                            Id = "102075be-a710-4035-87e0-25f7295074e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "885ac4a3-3635-4d0d-bbcd-30127fc27693",
                            DateOfBirth = new DateOnly(1999, 7, 22),
                            DepartmentName = "Marketing",
                            Email = "empl10@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "empl10",
                            LastName = "empl10",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL10@LOCALHOST.COM",
                            NormalizedUserName = "EMPL10@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDEWKEHCPz8moITqS9kEIBZuy+vI/bwV1AjKeeAhexCB0PYMSWjmnJ0g06W1G29QZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58c26812-2130-49e3-83ea-0920331adec3",
                            SkillLevel = 6,
                            TwoFactorEnabled = false,
                            UserName = "empl10@localhost.com"
                        });
                });

            modelBuilder.Entity("TaskManagementSystem.Data.TaskAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WorkingDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskTypeId")
                        .IsUnique();

                    b.HasIndex("WorkingDayId");

                    b.ToTable("TaskAllocations");
                });

            modelBuilder.Entity("TaskManagementSystem.Data.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Allocated")
                        .HasColumnType("bit");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allocated = false,
                            Completed = false,
                            Department = "Development",
                            Description = "You must complete the classes",
                            EndTime = new TimeOnly(11, 30, 0),
                            Name = "Develop the banking app",
                            SkillLevel = 10,
                            StartDate = new DateOnly(2025, 1, 31),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Allocated = false,
                            Completed = false,
                            Department = "Development",
                            Description = "Fix all reported database errors",
                            EndTime = new TimeOnly(11, 30, 0),
                            Name = "Fix database issues",
                            SkillLevel = 6,
                            StartDate = new DateOnly(2025, 1, 31),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Allocated = false,
                            Completed = false,
                            Department = "IT Support",
                            Description = "Implement additional firewalls",
                            EndTime = new TimeOnly(17, 0, 0),
                            Name = "Enhance security measures",
                            SkillLevel = 8,
                            StartDate = new DateOnly(2025, 1, 31),
                            StartTime = new TimeOnly(11, 30, 0)
                        },
                        new
                        {
                            Id = 4,
                            Allocated = false,
                            Completed = false,
                            Department = "Marketing",
                            Description = "Prepare new posters and flyers",
                            EndTime = new TimeOnly(11, 30, 0),
                            Name = "Design new campaign materials",
                            SkillLevel = 5,
                            StartDate = new DateOnly(2025, 1, 31),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            Allocated = false,
                            Completed = false,
                            Department = "Development",
                            Description = "Refactor legacy code",
                            EndTime = new TimeOnly(17, 0, 0),
                            Name = "Improve code quality",
                            SkillLevel = 7,
                            StartDate = new DateOnly(2025, 1, 31),
                            StartTime = new TimeOnly(11, 30, 0)
                        },
                        new
                        {
                            Id = 6,
                            Allocated = false,
                            Completed = false,
                            Department = "Development",
                            Description = "Integrate with external APIs",
                            EndTime = new TimeOnly(17, 0, 0),
                            Name = "Implement API integration",
                            SkillLevel = 9,
                            StartDate = new DateOnly(2025, 2, 3),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            Allocated = false,
                            Completed = false,
                            Department = "IT Support",
                            Description = "Run diagnostics on the company network",
                            EndTime = new TimeOnly(17, 0, 0),
                            Name = "Network diagnostics",
                            SkillLevel = 7,
                            StartDate = new DateOnly(2025, 2, 3),
                            StartTime = new TimeOnly(11, 30, 0)
                        },
                        new
                        {
                            Id = 8,
                            Allocated = false,
                            Completed = false,
                            Department = "Marketing",
                            Description = "Plan next month’s social media campaigns",
                            EndTime = new TimeOnly(11, 30, 0),
                            Name = "Social media strategy",
                            SkillLevel = 6,
                            StartDate = new DateOnly(2025, 2, 3),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            Allocated = false,
                            Completed = false,
                            Department = "IT Support",
                            Description = "Close all pending customer tickets",
                            EndTime = new TimeOnly(11, 30, 0),
                            Name = "Resolve customer tickets",
                            SkillLevel = 5,
                            StartDate = new DateOnly(2025, 2, 3),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            Allocated = false,
                            Completed = false,
                            Department = "Development",
                            Description = "Design and code a new landing page",
                            EndTime = new TimeOnly(17, 0, 0),
                            Name = "Create landing page",
                            SkillLevel = 8,
                            StartDate = new DateOnly(2025, 2, 3),
                            StartTime = new TimeOnly(11, 30, 0)
                        },
                        new
                        {
                            Id = 11,
                            Allocated = false,
                            Completed = false,
                            Department = "Development",
                            Description = "Resolve reported bugs in production",
                            EndTime = new TimeOnly(11, 30, 0),
                            Name = "Bug fixes in existing app",
                            SkillLevel = 8,
                            StartDate = new DateOnly(2025, 2, 4),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            Allocated = false,
                            Completed = false,
                            Department = "IT Support",
                            Description = "Install new servers",
                            EndTime = new TimeOnly(17, 0, 0),
                            Name = "Upgrade system hardware",
                            SkillLevel = 10,
                            StartDate = new DateOnly(2025, 2, 4),
                            StartTime = new TimeOnly(11, 30, 0)
                        },
                        new
                        {
                            Id = 13,
                            Allocated = false,
                            Completed = false,
                            Department = "Marketing",
                            Description = "Draft and finalize press release for new product launch",
                            EndTime = new TimeOnly(17, 0, 0),
                            Name = "Prepare press release",
                            SkillLevel = 7,
                            StartDate = new DateOnly(2025, 2, 4),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            Allocated = false,
                            Completed = false,
                            Department = "Development",
                            Description = "Perform QA testing on new features",
                            EndTime = new TimeOnly(11, 30, 0),
                            Name = "Test new features",
                            SkillLevel = 6,
                            StartDate = new DateOnly(2025, 2, 4),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            Allocated = false,
                            Completed = false,
                            Department = "Marketing",
                            Description = "Optimize website for search engines",
                            EndTime = new TimeOnly(17, 0, 0),
                            Name = "SEO optimization",
                            SkillLevel = 9,
                            StartDate = new DateOnly(2025, 2, 4),
                            StartTime = new TimeOnly(11, 30, 0)
                        },
                        new
                        {
                            Id = 16,
                            Allocated = false,
                            Completed = false,
                            Department = "IT Support",
                            Description = "Create a backup of all systems",
                            EndTime = new TimeOnly(11, 30, 0),
                            Name = "Data backup",
                            SkillLevel = 6,
                            StartDate = new DateOnly(2025, 2, 4),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            Allocated = false,
                            Completed = false,
                            Department = "Development",
                            Description = "Create test cases for upcoming releases",
                            EndTime = new TimeOnly(17, 0, 0),
                            Name = "Develop test cases",
                            SkillLevel = 7,
                            StartDate = new DateOnly(2025, 2, 4),
                            StartTime = new TimeOnly(11, 30, 0)
                        },
                        new
                        {
                            Id = 18,
                            Allocated = false,
                            Completed = false,
                            Department = "Marketing",
                            Description = "Prepare and send out promotional emails",
                            EndTime = new TimeOnly(11, 30, 0),
                            Name = "Manage email campaigns",
                            SkillLevel = 5,
                            StartDate = new DateOnly(2025, 2, 4),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            Allocated = false,
                            Completed = false,
                            Department = "IT Support",
                            Description = "Deploy patches to all systems",
                            EndTime = new TimeOnly(17, 0, 0),
                            Name = "Software patch update",
                            SkillLevel = 8,
                            StartDate = new DateOnly(2025, 2, 4),
                            StartTime = new TimeOnly(11, 30, 0)
                        },
                        new
                        {
                            Id = 20,
                            Allocated = false,
                            Completed = false,
                            Department = "Marketing",
                            Description = "Prepare a presentation for clients",
                            EndTime = new TimeOnly(17, 0, 0),
                            Name = "Create client presentation",
                            SkillLevel = 7,
                            StartDate = new DateOnly(2025, 2, 4),
                            StartTime = new TimeOnly(9, 0, 0)
                        });
                });

            modelBuilder.Entity("TaskManagementSystem.Data.WorkingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("WorkingDays");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManagementSystem.Data.TaskAllocation", b =>
                {
                    b.HasOne("TaskManagementSystem.Data.ApplicationUser", "Employee")
                        .WithMany("TaskAllocations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Data.TaskType", "TaskType")
                        .WithOne("TaskAllocation")
                        .HasForeignKey("TaskManagementSystem.Data.TaskAllocation", "TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementSystem.Data.WorkingDay", "WorkingDay")
                        .WithMany()
                        .HasForeignKey("WorkingDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TaskType");

                    b.Navigation("WorkingDay");
                });

            modelBuilder.Entity("TaskManagementSystem.Data.ApplicationUser", b =>
                {
                    b.Navigation("TaskAllocations");
                });

            modelBuilder.Entity("TaskManagementSystem.Data.TaskType", b =>
                {
                    b.Navigation("TaskAllocation");
                });
#pragma warning restore 612, 618
        }
    }
}
