@model TaskTypeReadOnlyVM

@{
	ViewData["Title"] = "Details";
	// Read the 'employeeNotified' query parameter from the URL
	bool employeeNotified = Context.Request.Query.ContainsKey("employeeNotified") && Context.Request.Query["employeeNotified"] == "False";
}

@if (employeeNotified)
{
	<div class="alert alert-warning">
		<strong>Notice:</strong> Something went wrong with the email service and the employee didn't get his automatic notification. Please contact technical support.
	</div>
	<br />
}

<h1>Detailed view for Task: @Model.Name</h1>
<hr />
<div>
	<dl class="row">
		<dt class="col-sm-2">
			@Html.DisplayNameFor(model => model.Name)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(model => model.Name)
		</dd>
		<br />
		<dt class="col-sm-2">
			@Html.DisplayNameFor(Model => Model.StartDate)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(Model => Model.StartDate)
		</dd>
		<br />
		<dt class="col-sm-2">
			@Html.DisplayNameFor(Model => Model.StartTime)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(Model => Model.StartTime)
		</dd>
		<br />
		<dt class="col-sm-2">
			@Html.DisplayNameFor(Model => Model.EndTime)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(Model => Model.EndTime)
		</dd>
		<br />
		<dt class="col-sm-2">
			@Html.DisplayNameFor(Model => Model.Department)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(Model => Model.Department)
		</dd>
		<br/>
		<dt class="col-sm-2">
			@Html.DisplayNameFor(Model => Model.SkillLevel)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(Model => Model.SkillLevel)
		</dd>
		<br />
		<dt class="col-sm-2">
			@Html.DisplayNameFor(Model => Model.Description)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(Model => Model.Description)
		</dd>
		<br />
		<dt class="col-sm-2">
			@Html.DisplayNameFor(Model => Model.Completed)
		</dt>
		<dd class="col-sm-10">
			@if (Model.Completed == true)
			{
				<span class="badge rounded-pill bg-primary">
					<i class="bi bi-check-circle"></i> Completed
				</span>
			}
			else
			{
				<span class="badge rounded-pill bg-warning">
					<i class="bi bi-check-circle"></i> Not Completed
				</span>
			}
		</dd>
	</dl>
</div>
@if (Model.Allocated == true)
{
	<hr />
	@if(Model.Completed == true)
	{
		<h1>The task was allocated to the following employee:</h1>
	}
	else
	{
		<h1>The task is allocated to the following employee:</h1>
	}
	<br />
	<div>
		<dl class="row">
			<dt class="col-sm-3">
				@Html.DisplayNameFor(Model => Model.employeeListVm.FirstName)
			</dt>
			<dd class="col-sm-7">
				@Html.DisplayFor(Model => Model.employeeListVm.FirstName)
			</dd>
			<dt class="col-sm-3">
				@Html.DisplayNameFor(Model => Model.employeeListVm.LastName)
			</dt>
			<dd class="col-sm-7">
				@Html.DisplayFor(Model => Model.employeeListVm.LastName)
			</dd>
			<dt class="col-sm-3">
				@Html.DisplayNameFor(Model => Model.employeeListVm.DepartmentName)
			</dt>
			<dd class="col-sm-7">
				@Html.DisplayFor(Model => Model.employeeListVm.DepartmentName)
			</dd>
			<dt class="col-sm-3">
				@Html.DisplayNameFor(Model => Model.employeeListVm.SkillLevel)
			</dt>
			<dd class="col-sm-7">
				@Html.DisplayFor(Model => Model.employeeListVm.SkillLevel)
			</dd>
			<dt class="col-sm-3">
				@Html.DisplayNameFor(Model => Model.employeeListVm.Email)
			</dt>
			<dd class="col-sm-7">
				@Html.DisplayFor(Model => Model.employeeListVm.Email)
			</dd>
			<br />
		</dl>
	</div>
	<div class="d-flex gap-2">
		@if (User.IsInRole(Roles.Administrator) || User.IsInRole(Roles.TaskManager))
		{
			if (Model.Completed == false)
			{
				<button data-id="@Model.TaskAllocationId" class="btn btn-danger deallocateBtn ps-2 pe-2">Deallocate Task</button>
				<form id="deallocateForm" asp-action="Deallocate" asp-controller="TaskAllocation">
					<input type="hidden" name="id" id="taskId" />
				</form>
			}
		}
		@if (User.IsInRole(Roles.TaskManager))
		{
			<a asp-controller="TaskAllocation" asp-action="SendMailToEmployee" class="btn btn-success" asp-route-id="@Model.employeeListVm.Id" asp-route-taskName=@($"Task: {Model.Name}, Date: {Model.StartDate}")>Send Email to Employee</a>
		}
		
	</div>
	<br />
}
else
{
	@if (User.IsInRole(Roles.Administrator) || User.IsInRole(Roles.TaskManager))
	{
		<div class="d-flex">
			<button data-id="@Model.Id" class="btn btn-success allocateBtn ps-2 pe-2">Allocate</button>
			<form id="allocateForm" asp-action="AllocateTask" asp-controller="TaskAllocation">
				<input type="hidden" name="id" id="taskId" />
			</form>
		</div>
		<br />
	}
}

<div class="d-flex gap-2">
	@if (User.IsInRole(Roles.Administrator))
	{
		<a asp-controller="TaskAllocation" asp-action="SendMailToEmployee" class="btn btn-success" asp-route-id="16914ec6-4686-4c2c-ba58-5a9c3c15f404" asp-route-taskName=@($"Task: {Model.Name}, Date: {Model.StartDate}")>Send Email to Task Manager</a>
	}
	@if (User.IsInRole(Roles.TaskManager))
	{
		<a asp-controller="TaskAllocation" asp-action="SendMailToEmployee" class="btn btn-warning" asp-route-id="384df32d-2a7c-4147-baf1-152db746565b" asp-route-taskName=@($"Task: {Model.Name}, Date: {Model.StartDate}")>Send Email to Administrator</a>
	}
	@if (User.IsInRole(Roles.Employee))
	{
		<a asp-controller="TaskAllocation" asp-action="SendMailToEmployee" class="btn btn-warning" asp-route-id="16914ec6-4686-4c2c-ba58-5a9c3c15f404" asp-route-taskName=@($"Task: {Model.Name}, Date: {Model.StartDate}")>Send Email to Task Manager</a>
		if(Model.Completed == false)
		{
			<button data-id="@Model.Id" class="btn btn-success completeBtn">Complete Task</button>
			<form id="completeForm" asp-action="CompleteTask" asp-controller="TaskAllocation">
				<input type="hidden" name="id" id="taskId" />
			</form>
		}
	
	}
	<button onclick="window.history.back();" class="btn btn-primary">Back</button>

</div>
@section Scripts {
	<script>
		$(function () {
			//Creating a button click event. (what pattern looking for?) --> (class cancelBtn)
			//I am watching all the elements with the certain class for a click event
			$('.completeBtn').click(
				//defining what should happen at a click event. e event element
				//The function is going to fire the confirmation task -
				//i could use JS alert("are you sure")but not easy to style
				function(e){
					//swal object to start process - buttons by default are going
					//to give a confimation or not
					swal({
						title: "Are you sure?",
						text: "Are you sure you want to complete this task? (If completed an automatic notification will be send to the task manager)",
						icon: "warning",
						buttons: true,
						dangerMode: false
					}).then((confirm) => {
						if (confirm){
							//$(this) the element that triggered the event
							var btn = $(this);
							var id = btn.data("id");
							//find the element with this id
							$('#taskId').val(id);
							//find the form with this id and submit
							$('#completeForm').submit();
						}
					});
				}
			);

			$(document).on('click', '.allocateBtn', function (e) {
				e.preventDefault(); // Prevent default button behavior

				const taskId = $(this).data("id"); // Get task ID from button
				const allocateForm = $('#allocateForm'); // Select the allocate form

				swal({
					title: "Are you sure?",
					text: "Are you sure you want to allocate this task? Once allocated, the employee will be notified automatically.",
					icon: "warning",
					buttons: {
						cancel: {
							text: "Cancel",
							value: false,
							visible: true,
							className: "btn btn-secondary",
							closeModal: true
						},
						confirm: {
							text: "Yes, Allocate",
							value: true,
							visible: true,
							className: "btn btn-success",
							closeModal: true
						}
					},
					dangerMode: false
				}).then((confirm) => {
					if (confirm) {
						allocateForm.find('#taskId').val(taskId); // Set task ID in the form
						allocateForm.submit(); // Submit the form
					}
				});
			});

			$(document).on('click', '.deallocateBtn', function (e) {
				e.preventDefault(); // Prevent default button behavior

				const taskId = $(this).data("id"); // Get task ID from button
				const allocateForm = $('#deallocateForm'); // Select the allocate form

				swal({
					title: "Are you sure?",
					text: "Are you sure you want to deallocate this task? Once deallocated, the employee will be notified automatically.",
					icon: "warning",
					buttons: {
						cancel: {
							text: "Cancel",
							value: false,
							visible: true,
							className: "btn btn-secondary",
							closeModal: true
						},
						confirm: {
							text: "Yes, Deallocate",
							value: true,
							visible: true,
							className: "btn btn-danger",
							closeModal: true
						}
					},
					dangerMode: false
				}).then((confirm) => {
					if (confirm) {
						allocateForm.find('#taskId').val(taskId); // Set task ID in the form
						allocateForm.submit(); // Submit the form
					}
				});
			});
		});

	</script>
}




<!--1.col-sm-2: This column occupies 2/12 of the row's width (16.67% of the row) on small devices and larger.
2. col-sm-10: This column occupies 10/12 of the row's width (83.33% of the row) on small devices and larger.
Together, they span the full row (2 + 10 = 12).-->
