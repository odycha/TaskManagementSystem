@model WorkingDayCreateVM

@{
	ViewData["Title"] = "Create";
}
<!-- Display the message if coming from allocation -->
@if (ViewBag.ComingFromAllocation == true)
{
	<div class="alert alert-warning">
		<strong>Notice:</strong> You can't allocate this task because there is no working day available for the date: @ViewBag.workingDayDate . Please create one first!
	</div>
}
else
{
	<h1>Create a new working day!</h1>
}

<hr />
@if (ViewBag.sameDateExists != null && (bool)ViewBag.sameDateExists) //Since ViewBag.sameDateExists is dynamically typed, you should cast it to bool when accessing it in the view ((bool)ViewBag.sameDateExists).
{
	<div class="alert alert-warning">
		<strong>Notice:</strong> A Work day already exists for this date. Select another date or edit the existing one.
	</div>
}
@if (ViewBag.ivalidTimeInput != null && (bool)ViewBag.ivalidTimeInput) 
{
	<div class="alert alert-warning">
		<strong>Notice:</strong> Start Time must be before End Time.
	</div>
}



<div class="row">
	<div class="col-md-4">
		<form asp-action="Create">
			<div asp-validation-summary="ModelOnly" class="text-danger"></div>
				<div class="form-group">
					<label asp-for="Day" class="control-label"></label>
					<input asp-for="Day" class="form-control" />
					<span asp-validation-for="Day" class="text-danger"></span>
				</div>
				<br />
				<div class="form-group">
					<label asp-for="StartTime" class="control-label"></label>
					<input asp-for="StartTime" class="form-control" />
					<span asp-validation-for="StartTime" class="text-danger"></span>
				</div>
				<br />
				<div class="form-group">
					<label asp-for="EndTime" class="control-label"></label>
					<input asp-for="EndTime" class="form-control" />
					<span asp-validation-for="EndTime" class="text-danger"></span>
				</div>
				<br />
				<div class="form-group">
					<label asp-for="Comments" class="control-label"></label>
					<textarea asp-for="Comments" class="form-control"></textarea>
					<span asp-validation-for="Comments" class="text-danger"></span>
				</div>
				<br />
				<input type="submit" value="Create Working Day" class="btn btn-success" />
				<a asp-action="Index" class="btn btn-primary">Back to List</a>
		</form>
	</div>
</div>



@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script>
		$(function () {
			$("#Day").datepicker({
				dateFormat: "DD, d MM, yy",
				changeMonth: true,
				changeYear: true,
				yearRange: "+0:+10"
			});
	
			$("#StartTime").timepicker({
				timeFormat: "HH:mm", // 24-hour format
				interval: 30,        // 30-minute increments
				minTime: "05:00",    // Minimum time
				maxTime: "20:00",    // Maximum time
				dynamic: false,      // Static dropdown
				dropdown: true,      // Dropdown instead of scroll
				scrollbar: true,     // Scrollable
				change: function (time) {
					const minTime = $(this).val();
					if (minTime) {
						const minMoment = moment(minTime, "HH:mm"); // Parse StartTime
						const adjustedMinTime = minMoment.add(30, "minutes").format("HH:mm"); // Add 30 minutes
						$("#EndTime").timepicker("option", "minTime", adjustedMinTime); // Set adjusted minTime for EndTime
					} else {
						$("#EndTime").timepicker("option", "minTime", null); // Reset minTime if StartTime is cleared
					}
				}
			});

			$("#EndTime").timepicker({
				timeFormat: "HH:mm", // 24-hour format
				interval: 30,        // 30-minute increments
				minTime: "05:00",    // Minimum time
				maxTime: "20:00",    // Maximum time
				dynamic: false,      // Static dropdown
				dropdown: true,      // Dropdown instead of scroll
				scrollbar: true,     // Scrollable
				change: function (time) {
					const maxTime = $(this).val();
					if (maxTime) {
						const maxMoment = moment(maxTime, "HH:mm"); // Parse EndTime
						const adjustedMaxTime = maxMoment.subtract(30, "minutes").format("HH:mm"); // Subtract 30 minutes
						$("#StartTime").timepicker("option", "maxTime", adjustedMaxTime); // Set adjusted maxTime for StartTime
					} else {
						$("#StartTime").timepicker("option", "maxTime", null); // Reset maxTime if EndTime is cleared
					}
				}
			});
		});
	</script>
}
