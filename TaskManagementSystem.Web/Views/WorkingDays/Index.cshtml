@model IEnumerable<WorkingDayReadOnlyVM>

@{
    ViewData["Title"] = "Working Dates Summary";
}

<h1>Working Dates Summary</h1>

<div class="button-container">
    @if (User.IsInRole(Roles.Administrator) || User.IsInRole(Roles.TaskManager))
    {
        <p>
            <a asp-action="Create" class="btn btn-primary">Create New Working Day</a>
        </p>
    }
</div>

@if (Model == null || !Model.Any())
{
    <p>No data available.</p>
}
else
{
    <div id="calendar"></div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');

            // Generate events from the Razor model
            var events = @Html.Raw(Json.Serialize(
                Model.Select(item => new
                {
                    id = item.Id,
                    title = $"{item.StartTime} - {item.EndTime}", // Combine comments 
                    start = $"{item.DayFormatted}T{item.StartTime:hh\\:mm}", // Start datetime in ISO 8601
                    end = $"{item.DayFormatted}T{item.EndTime:hh\\:mm}",// End datetime in ISO 8601
                    date = item.Day,
                    allDay = false, // Ensure events are treated as timed events
                    backgroundColor = "#007bff", // Custom background color
                    borderColor = "#007bff",     // Custom border color
                    textColor = "#ffffff",       // Custom text color
                    totalhrs = (item.EndTime - item.StartTime).TotalHours // Calculate total hours
                })
            ));

            // Create background events based on actual events
            var backgroundEvents = events.map(event => ({
                id: event.id,
                start: event.date,
                end: event.date,
                overlap: true, // Allow overlap with regular events
                display: 'background',
                color: 'green', // Highlight color for background
            }));

            // Combine the two sets of events
            var allEvents = events.concat(backgroundEvents);

            console.log(events); // Debugging: Check serialized events

        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth', // Week view
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay'
            },
            events: allEvents, // Bind events
            eventDisplay: 'block', // Stretches the event
            forceEventDuration: true, // Ensures all events have duration
            slotMinTime: "00:00:00", // Earliest time
            slotMaxTime: "24:00:00", // Latest time
            eventTimeFormat: { // Format event times
                hour: '2-digit',
                minute: '2-digit',
                hourCycle: 'h23'
            },
            allDaySlot: false,

            // Handle event click
            eventClick: function (info) {
                // Redirect to the Edit action with the event ID
                var editUrl = '@Url.Action("Edit", "WorkingDays")' + '?id=' + info.event.id;
                window.location.href = editUrl;
            },
            eventMouseEnter: function (info) {
                info.el.style.cursor = 'pointer'; // Change the cursor to a pointer
            },
            eventMouseLeave: function (info) {
                info.el.style.cursor = ''; // Revert to the default cursor
            }
            

    });


            // Render the calendar
            calendar.render();
        });
    </script>
}


